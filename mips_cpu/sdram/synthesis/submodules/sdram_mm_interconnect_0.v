// sdram_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 20.1 720

`timescale 1 ps / 1 ps
module sdram_mm_interconnect_0 (
		input  wire        pll_0_outclk0_clk,                                          //                                        pll_0_outclk0.clk
		input  wire        d_cache_read_clock_reset_reset_reset_bridge_in_reset_reset, // d_cache_read_clock_reset_reset_reset_bridge_in_reset.reset
		input  wire        sdram_controller_reset_reset_bridge_in_reset_reset,         //         sdram_controller_reset_reset_bridge_in_reset.reset
		input  wire [25:0] d_cache_read_avalon_master_address,                         //                           d_cache_read_avalon_master.address
		output wire        d_cache_read_avalon_master_waitrequest,                     //                                                     .waitrequest
		input  wire [3:0]  d_cache_read_avalon_master_byteenable,                      //                                                     .byteenable
		input  wire        d_cache_read_avalon_master_read,                            //                                                     .read
		output wire [31:0] d_cache_read_avalon_master_readdata,                        //                                                     .readdata
		output wire        d_cache_read_avalon_master_readdatavalid,                   //                                                     .readdatavalid
		input  wire [25:0] d_cache_write_avalon_master_address,                        //                          d_cache_write_avalon_master.address
		output wire        d_cache_write_avalon_master_waitrequest,                    //                                                     .waitrequest
		input  wire [3:0]  d_cache_write_avalon_master_byteenable,                     //                                                     .byteenable
		input  wire        d_cache_write_avalon_master_write,                          //                                                     .write
		input  wire [31:0] d_cache_write_avalon_master_writedata,                      //                                                     .writedata
		input  wire [25:0] i_cache_read_avalon_master_address,                         //                           i_cache_read_avalon_master.address
		output wire        i_cache_read_avalon_master_waitrequest,                     //                                                     .waitrequest
		input  wire [3:0]  i_cache_read_avalon_master_byteenable,                      //                                                     .byteenable
		input  wire        i_cache_read_avalon_master_read,                            //                                                     .read
		output wire [31:0] i_cache_read_avalon_master_readdata,                        //                                                     .readdata
		output wire        i_cache_read_avalon_master_readdatavalid,                   //                                                     .readdatavalid
		output wire [24:0] sdram_controller_s1_address,                                //                                  sdram_controller_s1.address
		output wire        sdram_controller_s1_write,                                  //                                                     .write
		output wire        sdram_controller_s1_read,                                   //                                                     .read
		input  wire [15:0] sdram_controller_s1_readdata,                               //                                                     .readdata
		output wire [15:0] sdram_controller_s1_writedata,                              //                                                     .writedata
		output wire [1:0]  sdram_controller_s1_byteenable,                             //                                                     .byteenable
		input  wire        sdram_controller_s1_readdatavalid,                          //                                                     .readdatavalid
		input  wire        sdram_controller_s1_waitrequest,                            //                                                     .waitrequest
		output wire        sdram_controller_s1_chipselect                              //                                                     .chipselect
	);

	wire         d_cache_read_avalon_master_translator_avalon_universal_master_0_waitrequest;    // d_cache_read_avalon_master_agent:av_waitrequest -> d_cache_read_avalon_master_translator:uav_waitrequest
	wire  [31:0] d_cache_read_avalon_master_translator_avalon_universal_master_0_readdata;       // d_cache_read_avalon_master_agent:av_readdata -> d_cache_read_avalon_master_translator:uav_readdata
	wire         d_cache_read_avalon_master_translator_avalon_universal_master_0_debugaccess;    // d_cache_read_avalon_master_translator:uav_debugaccess -> d_cache_read_avalon_master_agent:av_debugaccess
	wire  [25:0] d_cache_read_avalon_master_translator_avalon_universal_master_0_address;        // d_cache_read_avalon_master_translator:uav_address -> d_cache_read_avalon_master_agent:av_address
	wire         d_cache_read_avalon_master_translator_avalon_universal_master_0_read;           // d_cache_read_avalon_master_translator:uav_read -> d_cache_read_avalon_master_agent:av_read
	wire   [3:0] d_cache_read_avalon_master_translator_avalon_universal_master_0_byteenable;     // d_cache_read_avalon_master_translator:uav_byteenable -> d_cache_read_avalon_master_agent:av_byteenable
	wire         d_cache_read_avalon_master_translator_avalon_universal_master_0_readdatavalid;  // d_cache_read_avalon_master_agent:av_readdatavalid -> d_cache_read_avalon_master_translator:uav_readdatavalid
	wire         d_cache_read_avalon_master_translator_avalon_universal_master_0_lock;           // d_cache_read_avalon_master_translator:uav_lock -> d_cache_read_avalon_master_agent:av_lock
	wire         d_cache_read_avalon_master_translator_avalon_universal_master_0_write;          // d_cache_read_avalon_master_translator:uav_write -> d_cache_read_avalon_master_agent:av_write
	wire  [31:0] d_cache_read_avalon_master_translator_avalon_universal_master_0_writedata;      // d_cache_read_avalon_master_translator:uav_writedata -> d_cache_read_avalon_master_agent:av_writedata
	wire   [2:0] d_cache_read_avalon_master_translator_avalon_universal_master_0_burstcount;     // d_cache_read_avalon_master_translator:uav_burstcount -> d_cache_read_avalon_master_agent:av_burstcount
	wire         rsp_mux_src_valid;                                                              // rsp_mux:src_valid -> d_cache_read_avalon_master_agent:rp_valid
	wire  [97:0] rsp_mux_src_data;                                                               // rsp_mux:src_data -> d_cache_read_avalon_master_agent:rp_data
	wire         rsp_mux_src_ready;                                                              // d_cache_read_avalon_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [2:0] rsp_mux_src_channel;                                                            // rsp_mux:src_channel -> d_cache_read_avalon_master_agent:rp_channel
	wire         rsp_mux_src_startofpacket;                                                      // rsp_mux:src_startofpacket -> d_cache_read_avalon_master_agent:rp_startofpacket
	wire         rsp_mux_src_endofpacket;                                                        // rsp_mux:src_endofpacket -> d_cache_read_avalon_master_agent:rp_endofpacket
	wire         d_cache_write_avalon_master_translator_avalon_universal_master_0_waitrequest;   // d_cache_write_avalon_master_agent:av_waitrequest -> d_cache_write_avalon_master_translator:uav_waitrequest
	wire  [31:0] d_cache_write_avalon_master_translator_avalon_universal_master_0_readdata;      // d_cache_write_avalon_master_agent:av_readdata -> d_cache_write_avalon_master_translator:uav_readdata
	wire         d_cache_write_avalon_master_translator_avalon_universal_master_0_debugaccess;   // d_cache_write_avalon_master_translator:uav_debugaccess -> d_cache_write_avalon_master_agent:av_debugaccess
	wire  [25:0] d_cache_write_avalon_master_translator_avalon_universal_master_0_address;       // d_cache_write_avalon_master_translator:uav_address -> d_cache_write_avalon_master_agent:av_address
	wire         d_cache_write_avalon_master_translator_avalon_universal_master_0_read;          // d_cache_write_avalon_master_translator:uav_read -> d_cache_write_avalon_master_agent:av_read
	wire   [3:0] d_cache_write_avalon_master_translator_avalon_universal_master_0_byteenable;    // d_cache_write_avalon_master_translator:uav_byteenable -> d_cache_write_avalon_master_agent:av_byteenable
	wire         d_cache_write_avalon_master_translator_avalon_universal_master_0_readdatavalid; // d_cache_write_avalon_master_agent:av_readdatavalid -> d_cache_write_avalon_master_translator:uav_readdatavalid
	wire         d_cache_write_avalon_master_translator_avalon_universal_master_0_lock;          // d_cache_write_avalon_master_translator:uav_lock -> d_cache_write_avalon_master_agent:av_lock
	wire         d_cache_write_avalon_master_translator_avalon_universal_master_0_write;         // d_cache_write_avalon_master_translator:uav_write -> d_cache_write_avalon_master_agent:av_write
	wire  [31:0] d_cache_write_avalon_master_translator_avalon_universal_master_0_writedata;     // d_cache_write_avalon_master_translator:uav_writedata -> d_cache_write_avalon_master_agent:av_writedata
	wire   [2:0] d_cache_write_avalon_master_translator_avalon_universal_master_0_burstcount;    // d_cache_write_avalon_master_translator:uav_burstcount -> d_cache_write_avalon_master_agent:av_burstcount
	wire         rsp_mux_001_src_valid;                                                          // rsp_mux_001:src_valid -> d_cache_write_avalon_master_agent:rp_valid
	wire  [97:0] rsp_mux_001_src_data;                                                           // rsp_mux_001:src_data -> d_cache_write_avalon_master_agent:rp_data
	wire         rsp_mux_001_src_ready;                                                          // d_cache_write_avalon_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire   [2:0] rsp_mux_001_src_channel;                                                        // rsp_mux_001:src_channel -> d_cache_write_avalon_master_agent:rp_channel
	wire         rsp_mux_001_src_startofpacket;                                                  // rsp_mux_001:src_startofpacket -> d_cache_write_avalon_master_agent:rp_startofpacket
	wire         rsp_mux_001_src_endofpacket;                                                    // rsp_mux_001:src_endofpacket -> d_cache_write_avalon_master_agent:rp_endofpacket
	wire         i_cache_read_avalon_master_translator_avalon_universal_master_0_waitrequest;    // i_cache_read_avalon_master_agent:av_waitrequest -> i_cache_read_avalon_master_translator:uav_waitrequest
	wire  [31:0] i_cache_read_avalon_master_translator_avalon_universal_master_0_readdata;       // i_cache_read_avalon_master_agent:av_readdata -> i_cache_read_avalon_master_translator:uav_readdata
	wire         i_cache_read_avalon_master_translator_avalon_universal_master_0_debugaccess;    // i_cache_read_avalon_master_translator:uav_debugaccess -> i_cache_read_avalon_master_agent:av_debugaccess
	wire  [25:0] i_cache_read_avalon_master_translator_avalon_universal_master_0_address;        // i_cache_read_avalon_master_translator:uav_address -> i_cache_read_avalon_master_agent:av_address
	wire         i_cache_read_avalon_master_translator_avalon_universal_master_0_read;           // i_cache_read_avalon_master_translator:uav_read -> i_cache_read_avalon_master_agent:av_read
	wire   [3:0] i_cache_read_avalon_master_translator_avalon_universal_master_0_byteenable;     // i_cache_read_avalon_master_translator:uav_byteenable -> i_cache_read_avalon_master_agent:av_byteenable
	wire         i_cache_read_avalon_master_translator_avalon_universal_master_0_readdatavalid;  // i_cache_read_avalon_master_agent:av_readdatavalid -> i_cache_read_avalon_master_translator:uav_readdatavalid
	wire         i_cache_read_avalon_master_translator_avalon_universal_master_0_lock;           // i_cache_read_avalon_master_translator:uav_lock -> i_cache_read_avalon_master_agent:av_lock
	wire         i_cache_read_avalon_master_translator_avalon_universal_master_0_write;          // i_cache_read_avalon_master_translator:uav_write -> i_cache_read_avalon_master_agent:av_write
	wire  [31:0] i_cache_read_avalon_master_translator_avalon_universal_master_0_writedata;      // i_cache_read_avalon_master_translator:uav_writedata -> i_cache_read_avalon_master_agent:av_writedata
	wire   [2:0] i_cache_read_avalon_master_translator_avalon_universal_master_0_burstcount;     // i_cache_read_avalon_master_translator:uav_burstcount -> i_cache_read_avalon_master_agent:av_burstcount
	wire         rsp_mux_002_src_valid;                                                          // rsp_mux_002:src_valid -> i_cache_read_avalon_master_agent:rp_valid
	wire  [97:0] rsp_mux_002_src_data;                                                           // rsp_mux_002:src_data -> i_cache_read_avalon_master_agent:rp_data
	wire         rsp_mux_002_src_ready;                                                          // i_cache_read_avalon_master_agent:rp_ready -> rsp_mux_002:src_ready
	wire   [2:0] rsp_mux_002_src_channel;                                                        // rsp_mux_002:src_channel -> i_cache_read_avalon_master_agent:rp_channel
	wire         rsp_mux_002_src_startofpacket;                                                  // rsp_mux_002:src_startofpacket -> i_cache_read_avalon_master_agent:rp_startofpacket
	wire         rsp_mux_002_src_endofpacket;                                                    // rsp_mux_002:src_endofpacket -> i_cache_read_avalon_master_agent:rp_endofpacket
	wire  [15:0] sdram_controller_s1_agent_m0_readdata;                                          // sdram_controller_s1_translator:uav_readdata -> sdram_controller_s1_agent:m0_readdata
	wire         sdram_controller_s1_agent_m0_waitrequest;                                       // sdram_controller_s1_translator:uav_waitrequest -> sdram_controller_s1_agent:m0_waitrequest
	wire         sdram_controller_s1_agent_m0_debugaccess;                                       // sdram_controller_s1_agent:m0_debugaccess -> sdram_controller_s1_translator:uav_debugaccess
	wire  [25:0] sdram_controller_s1_agent_m0_address;                                           // sdram_controller_s1_agent:m0_address -> sdram_controller_s1_translator:uav_address
	wire   [1:0] sdram_controller_s1_agent_m0_byteenable;                                        // sdram_controller_s1_agent:m0_byteenable -> sdram_controller_s1_translator:uav_byteenable
	wire         sdram_controller_s1_agent_m0_read;                                              // sdram_controller_s1_agent:m0_read -> sdram_controller_s1_translator:uav_read
	wire         sdram_controller_s1_agent_m0_readdatavalid;                                     // sdram_controller_s1_translator:uav_readdatavalid -> sdram_controller_s1_agent:m0_readdatavalid
	wire         sdram_controller_s1_agent_m0_lock;                                              // sdram_controller_s1_agent:m0_lock -> sdram_controller_s1_translator:uav_lock
	wire  [15:0] sdram_controller_s1_agent_m0_writedata;                                         // sdram_controller_s1_agent:m0_writedata -> sdram_controller_s1_translator:uav_writedata
	wire         sdram_controller_s1_agent_m0_write;                                             // sdram_controller_s1_agent:m0_write -> sdram_controller_s1_translator:uav_write
	wire   [1:0] sdram_controller_s1_agent_m0_burstcount;                                        // sdram_controller_s1_agent:m0_burstcount -> sdram_controller_s1_translator:uav_burstcount
	wire         sdram_controller_s1_agent_rf_source_valid;                                      // sdram_controller_s1_agent:rf_source_valid -> sdram_controller_s1_agent_rsp_fifo:in_valid
	wire  [80:0] sdram_controller_s1_agent_rf_source_data;                                       // sdram_controller_s1_agent:rf_source_data -> sdram_controller_s1_agent_rsp_fifo:in_data
	wire         sdram_controller_s1_agent_rf_source_ready;                                      // sdram_controller_s1_agent_rsp_fifo:in_ready -> sdram_controller_s1_agent:rf_source_ready
	wire         sdram_controller_s1_agent_rf_source_startofpacket;                              // sdram_controller_s1_agent:rf_source_startofpacket -> sdram_controller_s1_agent_rsp_fifo:in_startofpacket
	wire         sdram_controller_s1_agent_rf_source_endofpacket;                                // sdram_controller_s1_agent:rf_source_endofpacket -> sdram_controller_s1_agent_rsp_fifo:in_endofpacket
	wire         sdram_controller_s1_agent_rsp_fifo_out_valid;                                   // sdram_controller_s1_agent_rsp_fifo:out_valid -> sdram_controller_s1_agent:rf_sink_valid
	wire  [80:0] sdram_controller_s1_agent_rsp_fifo_out_data;                                    // sdram_controller_s1_agent_rsp_fifo:out_data -> sdram_controller_s1_agent:rf_sink_data
	wire         sdram_controller_s1_agent_rsp_fifo_out_ready;                                   // sdram_controller_s1_agent:rf_sink_ready -> sdram_controller_s1_agent_rsp_fifo:out_ready
	wire         sdram_controller_s1_agent_rsp_fifo_out_startofpacket;                           // sdram_controller_s1_agent_rsp_fifo:out_startofpacket -> sdram_controller_s1_agent:rf_sink_startofpacket
	wire         sdram_controller_s1_agent_rsp_fifo_out_endofpacket;                             // sdram_controller_s1_agent_rsp_fifo:out_endofpacket -> sdram_controller_s1_agent:rf_sink_endofpacket
	wire         sdram_controller_s1_agent_rdata_fifo_src_valid;                                 // sdram_controller_s1_agent:rdata_fifo_src_valid -> sdram_controller_s1_agent_rdata_fifo:in_valid
	wire  [17:0] sdram_controller_s1_agent_rdata_fifo_src_data;                                  // sdram_controller_s1_agent:rdata_fifo_src_data -> sdram_controller_s1_agent_rdata_fifo:in_data
	wire         sdram_controller_s1_agent_rdata_fifo_src_ready;                                 // sdram_controller_s1_agent_rdata_fifo:in_ready -> sdram_controller_s1_agent:rdata_fifo_src_ready
	wire         d_cache_read_avalon_master_agent_cp_valid;                                      // d_cache_read_avalon_master_agent:cp_valid -> router:sink_valid
	wire  [97:0] d_cache_read_avalon_master_agent_cp_data;                                       // d_cache_read_avalon_master_agent:cp_data -> router:sink_data
	wire         d_cache_read_avalon_master_agent_cp_ready;                                      // router:sink_ready -> d_cache_read_avalon_master_agent:cp_ready
	wire         d_cache_read_avalon_master_agent_cp_startofpacket;                              // d_cache_read_avalon_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire         d_cache_read_avalon_master_agent_cp_endofpacket;                                // d_cache_read_avalon_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire         router_src_valid;                                                               // router:src_valid -> cmd_demux:sink_valid
	wire  [97:0] router_src_data;                                                                // router:src_data -> cmd_demux:sink_data
	wire         router_src_ready;                                                               // cmd_demux:sink_ready -> router:src_ready
	wire   [2:0] router_src_channel;                                                             // router:src_channel -> cmd_demux:sink_channel
	wire         router_src_startofpacket;                                                       // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire         router_src_endofpacket;                                                         // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire         d_cache_write_avalon_master_agent_cp_valid;                                     // d_cache_write_avalon_master_agent:cp_valid -> router_001:sink_valid
	wire  [97:0] d_cache_write_avalon_master_agent_cp_data;                                      // d_cache_write_avalon_master_agent:cp_data -> router_001:sink_data
	wire         d_cache_write_avalon_master_agent_cp_ready;                                     // router_001:sink_ready -> d_cache_write_avalon_master_agent:cp_ready
	wire         d_cache_write_avalon_master_agent_cp_startofpacket;                             // d_cache_write_avalon_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire         d_cache_write_avalon_master_agent_cp_endofpacket;                               // d_cache_write_avalon_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                                           // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [97:0] router_001_src_data;                                                            // router_001:src_data -> cmd_demux_001:sink_data
	wire         router_001_src_ready;                                                           // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [2:0] router_001_src_channel;                                                         // router_001:src_channel -> cmd_demux_001:sink_channel
	wire         router_001_src_startofpacket;                                                   // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire         router_001_src_endofpacket;                                                     // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire         i_cache_read_avalon_master_agent_cp_valid;                                      // i_cache_read_avalon_master_agent:cp_valid -> router_002:sink_valid
	wire  [97:0] i_cache_read_avalon_master_agent_cp_data;                                       // i_cache_read_avalon_master_agent:cp_data -> router_002:sink_data
	wire         i_cache_read_avalon_master_agent_cp_ready;                                      // router_002:sink_ready -> i_cache_read_avalon_master_agent:cp_ready
	wire         i_cache_read_avalon_master_agent_cp_startofpacket;                              // i_cache_read_avalon_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire         i_cache_read_avalon_master_agent_cp_endofpacket;                                // i_cache_read_avalon_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                                           // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [97:0] router_002_src_data;                                                            // router_002:src_data -> cmd_demux_002:sink_data
	wire         router_002_src_ready;                                                           // cmd_demux_002:sink_ready -> router_002:src_ready
	wire   [2:0] router_002_src_channel;                                                         // router_002:src_channel -> cmd_demux_002:sink_channel
	wire         router_002_src_startofpacket;                                                   // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire         router_002_src_endofpacket;                                                     // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire         sdram_controller_s1_agent_rp_valid;                                             // sdram_controller_s1_agent:rp_valid -> router_003:sink_valid
	wire  [79:0] sdram_controller_s1_agent_rp_data;                                              // sdram_controller_s1_agent:rp_data -> router_003:sink_data
	wire         sdram_controller_s1_agent_rp_ready;                                             // router_003:sink_ready -> sdram_controller_s1_agent:rp_ready
	wire         sdram_controller_s1_agent_rp_startofpacket;                                     // sdram_controller_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire         sdram_controller_s1_agent_rp_endofpacket;                                       // sdram_controller_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         sdram_controller_s1_burst_adapter_source0_valid;                                // sdram_controller_s1_burst_adapter:source0_valid -> sdram_controller_s1_agent:cp_valid
	wire  [79:0] sdram_controller_s1_burst_adapter_source0_data;                                 // sdram_controller_s1_burst_adapter:source0_data -> sdram_controller_s1_agent:cp_data
	wire         sdram_controller_s1_burst_adapter_source0_ready;                                // sdram_controller_s1_agent:cp_ready -> sdram_controller_s1_burst_adapter:source0_ready
	wire   [2:0] sdram_controller_s1_burst_adapter_source0_channel;                              // sdram_controller_s1_burst_adapter:source0_channel -> sdram_controller_s1_agent:cp_channel
	wire         sdram_controller_s1_burst_adapter_source0_startofpacket;                        // sdram_controller_s1_burst_adapter:source0_startofpacket -> sdram_controller_s1_agent:cp_startofpacket
	wire         sdram_controller_s1_burst_adapter_source0_endofpacket;                          // sdram_controller_s1_burst_adapter:source0_endofpacket -> sdram_controller_s1_agent:cp_endofpacket
	wire         cmd_demux_src0_valid;                                                           // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [97:0] cmd_demux_src0_data;                                                            // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                                           // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [2:0] cmd_demux_src0_channel;                                                         // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                                   // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                                     // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_001_src0_valid;                                                       // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [97:0] cmd_demux_001_src0_data;                                                        // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire         cmd_demux_001_src0_ready;                                                       // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire   [2:0] cmd_demux_001_src0_channel;                                                     // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire         cmd_demux_001_src0_startofpacket;                                               // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire         cmd_demux_001_src0_endofpacket;                                                 // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire         cmd_demux_002_src0_valid;                                                       // cmd_demux_002:src0_valid -> cmd_mux:sink2_valid
	wire  [97:0] cmd_demux_002_src0_data;                                                        // cmd_demux_002:src0_data -> cmd_mux:sink2_data
	wire         cmd_demux_002_src0_ready;                                                       // cmd_mux:sink2_ready -> cmd_demux_002:src0_ready
	wire   [2:0] cmd_demux_002_src0_channel;                                                     // cmd_demux_002:src0_channel -> cmd_mux:sink2_channel
	wire         cmd_demux_002_src0_startofpacket;                                               // cmd_demux_002:src0_startofpacket -> cmd_mux:sink2_startofpacket
	wire         cmd_demux_002_src0_endofpacket;                                                 // cmd_demux_002:src0_endofpacket -> cmd_mux:sink2_endofpacket
	wire         rsp_demux_src0_valid;                                                           // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [97:0] rsp_demux_src0_data;                                                            // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                                           // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [2:0] rsp_demux_src0_channel;                                                         // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                                   // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                                     // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_src1_valid;                                                           // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [97:0] rsp_demux_src1_data;                                                            // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire         rsp_demux_src1_ready;                                                           // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire   [2:0] rsp_demux_src1_channel;                                                         // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire         rsp_demux_src1_startofpacket;                                                   // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire         rsp_demux_src1_endofpacket;                                                     // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire         rsp_demux_src2_valid;                                                           // rsp_demux:src2_valid -> rsp_mux_002:sink0_valid
	wire  [97:0] rsp_demux_src2_data;                                                            // rsp_demux:src2_data -> rsp_mux_002:sink0_data
	wire         rsp_demux_src2_ready;                                                           // rsp_mux_002:sink0_ready -> rsp_demux:src2_ready
	wire   [2:0] rsp_demux_src2_channel;                                                         // rsp_demux:src2_channel -> rsp_mux_002:sink0_channel
	wire         rsp_demux_src2_startofpacket;                                                   // rsp_demux:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire         rsp_demux_src2_endofpacket;                                                     // rsp_demux:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire         router_003_src_valid;                                                           // router_003:src_valid -> sdram_controller_s1_rsp_width_adapter:in_valid
	wire  [79:0] router_003_src_data;                                                            // router_003:src_data -> sdram_controller_s1_rsp_width_adapter:in_data
	wire         router_003_src_ready;                                                           // sdram_controller_s1_rsp_width_adapter:in_ready -> router_003:src_ready
	wire   [2:0] router_003_src_channel;                                                         // router_003:src_channel -> sdram_controller_s1_rsp_width_adapter:in_channel
	wire         router_003_src_startofpacket;                                                   // router_003:src_startofpacket -> sdram_controller_s1_rsp_width_adapter:in_startofpacket
	wire         router_003_src_endofpacket;                                                     // router_003:src_endofpacket -> sdram_controller_s1_rsp_width_adapter:in_endofpacket
	wire         sdram_controller_s1_rsp_width_adapter_src_valid;                                // sdram_controller_s1_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [97:0] sdram_controller_s1_rsp_width_adapter_src_data;                                 // sdram_controller_s1_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire         sdram_controller_s1_rsp_width_adapter_src_ready;                                // rsp_demux:sink_ready -> sdram_controller_s1_rsp_width_adapter:out_ready
	wire   [2:0] sdram_controller_s1_rsp_width_adapter_src_channel;                              // sdram_controller_s1_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire         sdram_controller_s1_rsp_width_adapter_src_startofpacket;                        // sdram_controller_s1_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire         sdram_controller_s1_rsp_width_adapter_src_endofpacket;                          // sdram_controller_s1_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire         cmd_mux_src_valid;                                                              // cmd_mux:src_valid -> sdram_controller_s1_cmd_width_adapter:in_valid
	wire  [97:0] cmd_mux_src_data;                                                               // cmd_mux:src_data -> sdram_controller_s1_cmd_width_adapter:in_data
	wire         cmd_mux_src_ready;                                                              // sdram_controller_s1_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire   [2:0] cmd_mux_src_channel;                                                            // cmd_mux:src_channel -> sdram_controller_s1_cmd_width_adapter:in_channel
	wire         cmd_mux_src_startofpacket;                                                      // cmd_mux:src_startofpacket -> sdram_controller_s1_cmd_width_adapter:in_startofpacket
	wire         cmd_mux_src_endofpacket;                                                        // cmd_mux:src_endofpacket -> sdram_controller_s1_cmd_width_adapter:in_endofpacket
	wire         sdram_controller_s1_cmd_width_adapter_src_valid;                                // sdram_controller_s1_cmd_width_adapter:out_valid -> sdram_controller_s1_burst_adapter:sink0_valid
	wire  [79:0] sdram_controller_s1_cmd_width_adapter_src_data;                                 // sdram_controller_s1_cmd_width_adapter:out_data -> sdram_controller_s1_burst_adapter:sink0_data
	wire         sdram_controller_s1_cmd_width_adapter_src_ready;                                // sdram_controller_s1_burst_adapter:sink0_ready -> sdram_controller_s1_cmd_width_adapter:out_ready
	wire   [2:0] sdram_controller_s1_cmd_width_adapter_src_channel;                              // sdram_controller_s1_cmd_width_adapter:out_channel -> sdram_controller_s1_burst_adapter:sink0_channel
	wire         sdram_controller_s1_cmd_width_adapter_src_startofpacket;                        // sdram_controller_s1_cmd_width_adapter:out_startofpacket -> sdram_controller_s1_burst_adapter:sink0_startofpacket
	wire         sdram_controller_s1_cmd_width_adapter_src_endofpacket;                          // sdram_controller_s1_cmd_width_adapter:out_endofpacket -> sdram_controller_s1_burst_adapter:sink0_endofpacket
	wire         sdram_controller_s1_agent_rdata_fifo_out_valid;                                 // sdram_controller_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire  [17:0] sdram_controller_s1_agent_rdata_fifo_out_data;                                  // sdram_controller_s1_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire         sdram_controller_s1_agent_rdata_fifo_out_ready;                                 // avalon_st_adapter:in_0_ready -> sdram_controller_s1_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_out_0_valid;                                                  // avalon_st_adapter:out_0_valid -> sdram_controller_s1_agent:rdata_fifo_sink_valid
	wire  [17:0] avalon_st_adapter_out_0_data;                                                   // avalon_st_adapter:out_0_data -> sdram_controller_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                                  // sdram_controller_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                                  // avalon_st_adapter:out_0_error -> sdram_controller_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (26),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) d_cache_read_avalon_master_translator (
		.clk                    (pll_0_outclk0_clk),                                                             //                       clk.clk
		.reset                  (d_cache_read_clock_reset_reset_reset_bridge_in_reset_reset),                    //                     reset.reset
		.uav_address            (d_cache_read_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (d_cache_read_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (d_cache_read_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (d_cache_read_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (d_cache_read_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (d_cache_read_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (d_cache_read_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (d_cache_read_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (d_cache_read_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (d_cache_read_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (d_cache_read_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (d_cache_read_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (d_cache_read_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (d_cache_read_avalon_master_byteenable),                                         //                          .byteenable
		.av_read                (d_cache_read_avalon_master_read),                                               //                          .read
		.av_readdata            (d_cache_read_avalon_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (d_cache_read_avalon_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                          //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                          //               (terminated)
		.av_begintransfer       (1'b0),                                                                          //               (terminated)
		.av_chipselect          (1'b0),                                                                          //               (terminated)
		.av_write               (1'b0),                                                                          //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                          //               (terminated)
		.av_lock                (1'b0),                                                                          //               (terminated)
		.av_debugaccess         (1'b0),                                                                          //               (terminated)
		.uav_clken              (),                                                                              //               (terminated)
		.av_clken               (1'b1),                                                                          //               (terminated)
		.uav_response           (2'b00),                                                                         //               (terminated)
		.av_response            (),                                                                              //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                          //               (terminated)
		.av_writeresponsevalid  ()                                                                               //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (26),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) d_cache_write_avalon_master_translator (
		.clk                    (pll_0_outclk0_clk),                                                              //                       clk.clk
		.reset                  (d_cache_read_clock_reset_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address            (d_cache_write_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (d_cache_write_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (d_cache_write_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (d_cache_write_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (d_cache_write_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (d_cache_write_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (d_cache_write_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (d_cache_write_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (d_cache_write_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (d_cache_write_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (d_cache_write_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (d_cache_write_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (d_cache_write_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (d_cache_write_avalon_master_byteenable),                                         //                          .byteenable
		.av_write               (d_cache_write_avalon_master_write),                                              //                          .write
		.av_writedata           (d_cache_write_avalon_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                           //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                           //               (terminated)
		.av_begintransfer       (1'b0),                                                                           //               (terminated)
		.av_chipselect          (1'b0),                                                                           //               (terminated)
		.av_read                (1'b0),                                                                           //               (terminated)
		.av_readdata            (),                                                                               //               (terminated)
		.av_readdatavalid       (),                                                                               //               (terminated)
		.av_lock                (1'b0),                                                                           //               (terminated)
		.av_debugaccess         (1'b0),                                                                           //               (terminated)
		.uav_clken              (),                                                                               //               (terminated)
		.av_clken               (1'b1),                                                                           //               (terminated)
		.uav_response           (2'b00),                                                                          //               (terminated)
		.av_response            (),                                                                               //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                           //               (terminated)
		.av_writeresponsevalid  ()                                                                                //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (26),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) i_cache_read_avalon_master_translator (
		.clk                    (pll_0_outclk0_clk),                                                             //                       clk.clk
		.reset                  (d_cache_read_clock_reset_reset_reset_bridge_in_reset_reset),                    //                     reset.reset
		.uav_address            (i_cache_read_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (i_cache_read_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (i_cache_read_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (i_cache_read_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (i_cache_read_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (i_cache_read_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (i_cache_read_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (i_cache_read_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (i_cache_read_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (i_cache_read_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (i_cache_read_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (i_cache_read_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (i_cache_read_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (i_cache_read_avalon_master_byteenable),                                         //                          .byteenable
		.av_read                (i_cache_read_avalon_master_read),                                               //                          .read
		.av_readdata            (i_cache_read_avalon_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (i_cache_read_avalon_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                          //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                          //               (terminated)
		.av_begintransfer       (1'b0),                                                                          //               (terminated)
		.av_chipselect          (1'b0),                                                                          //               (terminated)
		.av_write               (1'b0),                                                                          //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                          //               (terminated)
		.av_lock                (1'b0),                                                                          //               (terminated)
		.av_debugaccess         (1'b0),                                                                          //               (terminated)
		.uav_clken              (),                                                                              //               (terminated)
		.av_clken               (1'b1),                                                                          //               (terminated)
		.uav_response           (2'b00),                                                                         //               (terminated)
		.av_response            (),                                                                              //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                          //               (terminated)
		.av_writeresponsevalid  ()                                                                               //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_controller_s1_translator (
		.clk                    (pll_0_outclk0_clk),                                  //                      clk.clk
		.reset                  (sdram_controller_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_controller_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_controller_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (sdram_controller_s1_agent_m0_read),                  //                         .read
		.uav_write              (sdram_controller_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (sdram_controller_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (sdram_controller_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (sdram_controller_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (sdram_controller_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (sdram_controller_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (sdram_controller_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (sdram_controller_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (sdram_controller_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (sdram_controller_s1_write),                          //                         .write
		.av_read                (sdram_controller_s1_read),                           //                         .read
		.av_readdata            (sdram_controller_s1_readdata),                       //                         .readdata
		.av_writedata           (sdram_controller_s1_writedata),                      //                         .writedata
		.av_byteenable          (sdram_controller_s1_byteenable),                     //                         .byteenable
		.av_readdatavalid       (sdram_controller_s1_readdatavalid),                  //                         .readdatavalid
		.av_waitrequest         (sdram_controller_s1_waitrequest),                    //                         .waitrequest
		.av_chipselect          (sdram_controller_s1_chipselect),                     //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (97),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_QOS_H                 (80),
		.PKT_QOS_L                 (80),
		.PKT_DATA_SIDEBAND_H       (78),
		.PKT_DATA_SIDEBAND_L       (78),
		.PKT_ADDR_SIDEBAND_H       (77),
		.PKT_ADDR_SIDEBAND_L       (77),
		.PKT_BURST_TYPE_H          (76),
		.PKT_BURST_TYPE_L          (75),
		.PKT_CACHE_H               (92),
		.PKT_CACHE_L               (89),
		.PKT_THREAD_ID_H           (85),
		.PKT_THREAD_ID_L           (85),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_EXCLUSIVE       (67),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (83),
		.ST_DATA_W                 (98),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) d_cache_read_avalon_master_agent (
		.clk                   (pll_0_outclk0_clk),                                                             //       clk.clk
		.reset                 (d_cache_read_clock_reset_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.av_address            (d_cache_read_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (d_cache_read_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (d_cache_read_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (d_cache_read_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (d_cache_read_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (d_cache_read_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (d_cache_read_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (d_cache_read_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (d_cache_read_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (d_cache_read_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (d_cache_read_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (d_cache_read_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (d_cache_read_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (d_cache_read_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (d_cache_read_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (d_cache_read_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                             //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                              //          .data
		.rp_channel            (rsp_mux_src_channel),                                                           //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                     //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                       //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                             //          .ready
		.av_response           (),                                                                              // (terminated)
		.av_writeresponsevalid ()                                                                               // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (97),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_QOS_H                 (80),
		.PKT_QOS_L                 (80),
		.PKT_DATA_SIDEBAND_H       (78),
		.PKT_DATA_SIDEBAND_L       (78),
		.PKT_ADDR_SIDEBAND_H       (77),
		.PKT_ADDR_SIDEBAND_L       (77),
		.PKT_BURST_TYPE_H          (76),
		.PKT_BURST_TYPE_L          (75),
		.PKT_CACHE_H               (92),
		.PKT_CACHE_L               (89),
		.PKT_THREAD_ID_H           (85),
		.PKT_THREAD_ID_L           (85),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_EXCLUSIVE       (67),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (83),
		.ST_DATA_W                 (98),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) d_cache_write_avalon_master_agent (
		.clk                   (pll_0_outclk0_clk),                                                              //       clk.clk
		.reset                 (d_cache_read_clock_reset_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.av_address            (d_cache_write_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (d_cache_write_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (d_cache_write_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (d_cache_write_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (d_cache_write_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (d_cache_write_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (d_cache_write_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (d_cache_write_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (d_cache_write_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (d_cache_write_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (d_cache_write_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (d_cache_write_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (d_cache_write_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (d_cache_write_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (d_cache_write_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (d_cache_write_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                          //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                           //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                        //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                                  //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                    //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                          //          .ready
		.av_response           (),                                                                               // (terminated)
		.av_writeresponsevalid ()                                                                                // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (97),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_QOS_H                 (80),
		.PKT_QOS_L                 (80),
		.PKT_DATA_SIDEBAND_H       (78),
		.PKT_DATA_SIDEBAND_L       (78),
		.PKT_ADDR_SIDEBAND_H       (77),
		.PKT_ADDR_SIDEBAND_L       (77),
		.PKT_BURST_TYPE_H          (76),
		.PKT_BURST_TYPE_L          (75),
		.PKT_CACHE_H               (92),
		.PKT_CACHE_L               (89),
		.PKT_THREAD_ID_H           (85),
		.PKT_THREAD_ID_L           (85),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_EXCLUSIVE       (67),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (83),
		.ST_DATA_W                 (98),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) i_cache_read_avalon_master_agent (
		.clk                   (pll_0_outclk0_clk),                                                             //       clk.clk
		.reset                 (d_cache_read_clock_reset_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.av_address            (i_cache_read_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (i_cache_read_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (i_cache_read_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (i_cache_read_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (i_cache_read_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (i_cache_read_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (i_cache_read_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (i_cache_read_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (i_cache_read_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (i_cache_read_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (i_cache_read_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (i_cache_read_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (i_cache_read_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (i_cache_read_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (i_cache_read_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (i_cache_read_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                                         //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                                          //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                                       //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                                 //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                                   //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                                         //          .ready
		.av_response           (),                                                                              // (terminated)
		.av_writeresponsevalid ()                                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (79),
		.PKT_ORI_BURST_SIZE_L      (77),
		.PKT_RESPONSE_STATUS_H     (76),
		.PKT_RESPONSE_STATUS_L     (75),
		.PKT_BURST_SIZE_H          (56),
		.PKT_BURST_SIZE_L          (54),
		.PKT_TRANS_LOCK            (48),
		.PKT_BEGIN_BURST           (61),
		.PKT_PROTECTION_H          (70),
		.PKT_PROTECTION_L          (68),
		.PKT_BURSTWRAP_H           (53),
		.PKT_BURSTWRAP_L           (53),
		.PKT_BYTE_CNT_H            (52),
		.PKT_BYTE_CNT_L            (50),
		.PKT_ADDR_H                (43),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (44),
		.PKT_TRANS_POSTED          (45),
		.PKT_TRANS_WRITE           (46),
		.PKT_TRANS_READ            (47),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (64),
		.PKT_SRC_ID_L              (63),
		.PKT_DEST_ID_H             (66),
		.PKT_DEST_ID_L             (65),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (80),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_controller_s1_agent (
		.clk                     (pll_0_outclk0_clk),                                       //             clk.clk
		.reset                   (sdram_controller_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (sdram_controller_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sdram_controller_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sdram_controller_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sdram_controller_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sdram_controller_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (sdram_controller_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sdram_controller_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sdram_controller_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (sdram_controller_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sdram_controller_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (sdram_controller_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (sdram_controller_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sdram_controller_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (sdram_controller_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (sdram_controller_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (sdram_controller_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sdram_controller_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sdram_controller_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sdram_controller_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sdram_controller_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sdram_controller_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sdram_controller_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sdram_controller_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sdram_controller_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sdram_controller_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sdram_controller_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sdram_controller_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sdram_controller_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sdram_controller_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sdram_controller_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sdram_controller_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sdram_controller_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (sdram_controller_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_controller_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sdram_controller_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (81),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_controller_s1_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                    //       clk.clk
		.reset             (sdram_controller_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (sdram_controller_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_controller_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_controller_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_controller_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_controller_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_controller_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_controller_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_controller_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_controller_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_controller_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_controller_s1_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                                  //       clk.clk
		.reset             (sdram_controller_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_controller_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (sdram_controller_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (sdram_controller_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (sdram_controller_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (sdram_controller_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (sdram_controller_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	sdram_mm_interconnect_0_router router (
		.sink_ready         (d_cache_read_avalon_master_agent_cp_ready),                  //      sink.ready
		.sink_valid         (d_cache_read_avalon_master_agent_cp_valid),                  //          .valid
		.sink_data          (d_cache_read_avalon_master_agent_cp_data),                   //          .data
		.sink_startofpacket (d_cache_read_avalon_master_agent_cp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (d_cache_read_avalon_master_agent_cp_endofpacket),            //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                          //       clk.clk
		.reset              (d_cache_read_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                           //       src.ready
		.src_valid          (router_src_valid),                                           //          .valid
		.src_data           (router_src_data),                                            //          .data
		.src_channel        (router_src_channel),                                         //          .channel
		.src_startofpacket  (router_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                      //          .endofpacket
	);

	sdram_mm_interconnect_0_router router_001 (
		.sink_ready         (d_cache_write_avalon_master_agent_cp_ready),                 //      sink.ready
		.sink_valid         (d_cache_write_avalon_master_agent_cp_valid),                 //          .valid
		.sink_data          (d_cache_write_avalon_master_agent_cp_data),                  //          .data
		.sink_startofpacket (d_cache_write_avalon_master_agent_cp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (d_cache_write_avalon_master_agent_cp_endofpacket),           //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                          //       clk.clk
		.reset              (d_cache_read_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                       //       src.ready
		.src_valid          (router_001_src_valid),                                       //          .valid
		.src_data           (router_001_src_data),                                        //          .data
		.src_channel        (router_001_src_channel),                                     //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                  //          .endofpacket
	);

	sdram_mm_interconnect_0_router router_002 (
		.sink_ready         (i_cache_read_avalon_master_agent_cp_ready),                  //      sink.ready
		.sink_valid         (i_cache_read_avalon_master_agent_cp_valid),                  //          .valid
		.sink_data          (i_cache_read_avalon_master_agent_cp_data),                   //          .data
		.sink_startofpacket (i_cache_read_avalon_master_agent_cp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (i_cache_read_avalon_master_agent_cp_endofpacket),            //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                          //       clk.clk
		.reset              (d_cache_read_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                       //       src.ready
		.src_valid          (router_002_src_valid),                                       //          .valid
		.src_data           (router_002_src_data),                                        //          .data
		.src_channel        (router_002_src_channel),                                     //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                  //          .endofpacket
	);

	sdram_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (sdram_controller_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (sdram_controller_s1_agent_rp_valid),                 //          .valid
		.sink_data          (sdram_controller_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (sdram_controller_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (sdram_controller_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                  //       clk.clk
		.reset              (sdram_controller_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                               //       src.ready
		.src_valid          (router_003_src_valid),                               //          .valid
		.src_data           (router_003_src_data),                                //          .data
		.src_channel        (router_003_src_channel),                             //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                          //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (43),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (61),
		.PKT_BYTE_CNT_H            (52),
		.PKT_BYTE_CNT_L            (50),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (56),
		.PKT_BURST_SIZE_L          (54),
		.PKT_BURST_TYPE_H          (58),
		.PKT_BURST_TYPE_L          (57),
		.PKT_BURSTWRAP_H           (53),
		.PKT_BURSTWRAP_L           (53),
		.PKT_TRANS_COMPRESSED_READ (44),
		.PKT_TRANS_WRITE           (46),
		.PKT_TRANS_READ            (47),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (80),
		.ST_CHANNEL_W              (3),
		.OUT_BYTE_CNT_H            (51),
		.OUT_BURSTWRAP_H           (53),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) sdram_controller_s1_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                                       //       cr0.clk
		.reset                 (sdram_controller_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (sdram_controller_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sdram_controller_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sdram_controller_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sdram_controller_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sdram_controller_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sdram_controller_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sdram_controller_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sdram_controller_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sdram_controller_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sdram_controller_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sdram_controller_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sdram_controller_s1_burst_adapter_source0_ready)          //          .ready
	);

	sdram_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (pll_0_outclk0_clk),                                          //       clk.clk
		.reset              (d_cache_read_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                           //      sink.ready
		.sink_channel       (router_src_channel),                                         //          .channel
		.sink_data          (router_src_data),                                            //          .data
		.sink_startofpacket (router_src_startofpacket),                                   //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                     //          .endofpacket
		.sink_valid         (router_src_valid),                                           //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                       //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                       //          .valid
		.src0_data          (cmd_demux_src0_data),                                        //          .data
		.src0_channel       (cmd_demux_src0_channel),                                     //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                               //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                  //          .endofpacket
	);

	sdram_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (pll_0_outclk0_clk),                                          //       clk.clk
		.reset              (d_cache_read_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                       //      sink.ready
		.sink_channel       (router_001_src_channel),                                     //          .channel
		.sink_data          (router_001_src_data),                                        //          .data
		.sink_startofpacket (router_001_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_001_src_valid),                                       //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                   //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                   //          .valid
		.src0_data          (cmd_demux_001_src0_data),                                    //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                 //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                              //          .endofpacket
	);

	sdram_mm_interconnect_0_cmd_demux cmd_demux_002 (
		.clk                (pll_0_outclk0_clk),                                          //       clk.clk
		.reset              (d_cache_read_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                       //      sink.ready
		.sink_channel       (router_002_src_channel),                                     //          .channel
		.sink_data          (router_002_src_data),                                        //          .data
		.sink_startofpacket (router_002_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_002_src_valid),                                       //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                                   //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                   //          .valid
		.src0_data          (cmd_demux_002_src0_data),                                    //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                                 //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)                              //          .endofpacket
	);

	sdram_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (pll_0_outclk0_clk),                                  //       clk.clk
		.reset               (sdram_controller_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_src_valid),                                  //          .valid
		.src_data            (cmd_mux_src_data),                                   //          .data
		.src_channel         (cmd_mux_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                             //          .channel
		.sink0_data          (cmd_demux_src0_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                           //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                         //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                            //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                           //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                         //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                            //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket)                      //          .endofpacket
	);

	sdram_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (pll_0_outclk0_clk),                                       //       clk.clk
		.reset              (sdram_controller_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.sink_ready         (sdram_controller_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sdram_controller_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sdram_controller_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sdram_controller_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sdram_controller_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sdram_controller_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                              //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                    //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                    //          .valid
		.src1_data          (rsp_demux_src1_data),                                     //          .data
		.src1_channel       (rsp_demux_src1_channel),                                  //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                            //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                              //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                                    //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                                    //          .valid
		.src2_data          (rsp_demux_src2_data),                                     //          .data
		.src2_channel       (rsp_demux_src2_channel),                                  //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                            //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket)                               //          .endofpacket
	);

	sdram_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (pll_0_outclk0_clk),                                          //       clk.clk
		.reset               (d_cache_read_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                          //       src.ready
		.src_valid           (rsp_mux_src_valid),                                          //          .valid
		.src_data            (rsp_mux_src_data),                                           //          .data
		.src_channel         (rsp_mux_src_channel),                                        //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                    //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                       //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                       //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                     //          .channel
		.sink0_data          (rsp_demux_src0_data),                                        //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                                  //          .endofpacket
	);

	sdram_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (pll_0_outclk0_clk),                                          //       clk.clk
		.reset               (d_cache_read_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                      //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                      //          .valid
		.src_data            (rsp_mux_001_src_data),                                       //          .data
		.src_channel         (rsp_mux_001_src_channel),                                    //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                       //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                       //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                     //          .channel
		.sink0_data          (rsp_demux_src1_data),                                        //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket)                                  //          .endofpacket
	);

	sdram_mm_interconnect_0_rsp_mux rsp_mux_002 (
		.clk                 (pll_0_outclk0_clk),                                          //       clk.clk
		.reset               (d_cache_read_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                      //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                      //          .valid
		.src_data            (rsp_mux_002_src_data),                                       //          .data
		.src_channel         (rsp_mux_002_src_channel),                                    //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (rsp_demux_src2_ready),                                       //     sink0.ready
		.sink0_valid         (rsp_demux_src2_valid),                                       //          .valid
		.sink0_channel       (rsp_demux_src2_channel),                                     //          .channel
		.sink0_data          (rsp_demux_src2_data),                                        //          .data
		.sink0_startofpacket (rsp_demux_src2_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src2_endofpacket)                                  //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (43),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (52),
		.IN_PKT_BYTE_CNT_L             (50),
		.IN_PKT_TRANS_COMPRESSED_READ  (44),
		.IN_PKT_TRANS_WRITE            (46),
		.IN_PKT_BURSTWRAP_H            (53),
		.IN_PKT_BURSTWRAP_L            (53),
		.IN_PKT_BURST_SIZE_H           (56),
		.IN_PKT_BURST_SIZE_L           (54),
		.IN_PKT_RESPONSE_STATUS_H      (76),
		.IN_PKT_RESPONSE_STATUS_L      (75),
		.IN_PKT_TRANS_EXCLUSIVE        (49),
		.IN_PKT_BURST_TYPE_H           (58),
		.IN_PKT_BURST_TYPE_L           (57),
		.IN_PKT_ORI_BURST_SIZE_L       (77),
		.IN_PKT_ORI_BURST_SIZE_H       (79),
		.IN_ST_DATA_W                  (80),
		.OUT_PKT_ADDR_H                (61),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (70),
		.OUT_PKT_BYTE_CNT_L            (68),
		.OUT_PKT_TRANS_COMPRESSED_READ (62),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (94),
		.OUT_PKT_RESPONSE_STATUS_L     (93),
		.OUT_PKT_TRANS_EXCLUSIVE       (67),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (95),
		.OUT_PKT_ORI_BURST_SIZE_H      (97),
		.OUT_ST_DATA_W                 (98),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_controller_s1_rsp_width_adapter (
		.clk                  (pll_0_outclk0_clk),                                       //       clk.clk
		.reset                (sdram_controller_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (router_003_src_valid),                                    //      sink.valid
		.in_channel           (router_003_src_channel),                                  //          .channel
		.in_startofpacket     (router_003_src_startofpacket),                            //          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                              //          .endofpacket
		.in_ready             (router_003_src_ready),                                    //          .ready
		.in_data              (router_003_src_data),                                     //          .data
		.out_endofpacket      (sdram_controller_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_controller_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_controller_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_controller_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_controller_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_controller_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (61),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (70),
		.IN_PKT_BYTE_CNT_L             (68),
		.IN_PKT_TRANS_COMPRESSED_READ  (62),
		.IN_PKT_TRANS_WRITE            (64),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (71),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (94),
		.IN_PKT_RESPONSE_STATUS_L      (93),
		.IN_PKT_TRANS_EXCLUSIVE        (67),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (95),
		.IN_PKT_ORI_BURST_SIZE_H       (97),
		.IN_ST_DATA_W                  (98),
		.OUT_PKT_ADDR_H                (43),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (52),
		.OUT_PKT_BYTE_CNT_L            (50),
		.OUT_PKT_TRANS_COMPRESSED_READ (44),
		.OUT_PKT_BURST_SIZE_H          (56),
		.OUT_PKT_BURST_SIZE_L          (54),
		.OUT_PKT_RESPONSE_STATUS_H     (76),
		.OUT_PKT_RESPONSE_STATUS_L     (75),
		.OUT_PKT_TRANS_EXCLUSIVE       (49),
		.OUT_PKT_BURST_TYPE_H          (58),
		.OUT_PKT_BURST_TYPE_L          (57),
		.OUT_PKT_ORI_BURST_SIZE_L      (77),
		.OUT_PKT_ORI_BURST_SIZE_H      (79),
		.OUT_ST_DATA_W                 (80),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_controller_s1_cmd_width_adapter (
		.clk                  (pll_0_outclk0_clk),                                       //       clk.clk
		.reset                (sdram_controller_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                       //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                     //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                               //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                 //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                       //          .ready
		.in_data              (cmd_mux_src_data),                                        //          .data
		.out_endofpacket      (sdram_controller_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_controller_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sdram_controller_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_controller_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_controller_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_controller_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                   // (terminated)
	);

	sdram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (pll_0_outclk0_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (sdram_controller_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_controller_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (sdram_controller_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (sdram_controller_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                       //         .error
	);

endmodule
