	component sdram is
		port (
			clk_clk                              : in    std_logic                     := 'X';             -- clk
			d_cache_read_control_fixed_location  : in    std_logic                     := 'X';             -- fixed_location
			d_cache_read_control_read_base       : in    std_logic_vector(25 downto 0) := (others => 'X'); -- read_base
			d_cache_read_control_read_length     : in    std_logic_vector(25 downto 0) := (others => 'X'); -- read_length
			d_cache_read_control_go              : in    std_logic                     := 'X';             -- go
			d_cache_read_control_done            : out   std_logic;                                        -- done
			d_cache_read_control_early_done      : out   std_logic;                                        -- early_done
			d_cache_read_user_read_buffer        : in    std_logic                     := 'X';             -- read_buffer
			d_cache_read_user_buffer_output_data : out   std_logic_vector(31 downto 0);                    -- buffer_output_data
			d_cache_read_user_data_available     : out   std_logic;                                        -- data_available
			d_cache_write_control_fixed_location : in    std_logic                     := 'X';             -- fixed_location
			d_cache_write_control_write_base     : in    std_logic_vector(25 downto 0) := (others => 'X'); -- write_base
			d_cache_write_control_write_length   : in    std_logic_vector(25 downto 0) := (others => 'X'); -- write_length
			d_cache_write_control_go             : in    std_logic                     := 'X';             -- go
			d_cache_write_control_done           : out   std_logic;                                        -- done
			d_cache_write_user_write_buffer      : in    std_logic                     := 'X';             -- write_buffer
			d_cache_write_user_buffer_input_data : in    std_logic_vector(31 downto 0) := (others => 'X'); -- buffer_input_data
			d_cache_write_user_buffer_full       : out   std_logic;                                        -- buffer_full
			i_cache_read_control_fixed_location  : in    std_logic                     := 'X';             -- fixed_location
			i_cache_read_control_read_base       : in    std_logic_vector(25 downto 0) := (others => 'X'); -- read_base
			i_cache_read_control_read_length     : in    std_logic_vector(25 downto 0) := (others => 'X'); -- read_length
			i_cache_read_control_go              : in    std_logic                     := 'X';             -- go
			i_cache_read_control_done            : out   std_logic;                                        -- done
			i_cache_read_control_early_done      : out   std_logic;                                        -- early_done
			i_cache_read_user_read_buffer        : in    std_logic                     := 'X';             -- read_buffer
			i_cache_read_user_buffer_output_data : out   std_logic_vector(31 downto 0);                    -- buffer_output_data
			i_cache_read_user_data_available     : out   std_logic;                                        -- data_available
			mips_core_clk_clk                    : out   std_logic;                                        -- clk
			mips_core_rst_reset_n                : out   std_logic;                                        -- reset_n
			pll_0_locked_export                  : out   std_logic;                                        -- export
			reset_reset_n                        : in    std_logic                     := 'X';             -- reset_n
			sdram_clk_clk                        : out   std_logic;                                        -- clk
			sdram_controller_wire_addr           : out   std_logic_vector(12 downto 0);                    -- addr
			sdram_controller_wire_ba             : out   std_logic_vector(1 downto 0);                     -- ba
			sdram_controller_wire_cas_n          : out   std_logic;                                        -- cas_n
			sdram_controller_wire_cke            : out   std_logic;                                        -- cke
			sdram_controller_wire_cs_n           : out   std_logic;                                        -- cs_n
			sdram_controller_wire_dq             : inout std_logic_vector(15 downto 0) := (others => 'X'); -- dq
			sdram_controller_wire_dqm            : out   std_logic_vector(1 downto 0);                     -- dqm
			sdram_controller_wire_ras_n          : out   std_logic;                                        -- ras_n
			sdram_controller_wire_we_n           : out   std_logic                                         -- we_n
		);
	end component sdram;

