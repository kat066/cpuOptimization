Walk through v2.0

This is just a quick walk through. I'm still working on a detailed documentation

# Software Installation (20 min)
For this project, you need to install Quartus Prime 17.1 for synthesis and
Modelsim - INTEL 10.5b for simulation. A lite version (free version) is enough.
These two softwares support both windows and linux. (However the project is only
tested on windows platform)

You can download these software here

    http://dl.altera.com/17.1/?edition=lite&download_manager=direct

You need to download three files from this site,

    1. Quartus Prime (includes Nios II EDS)
    2. ModelSim-Intel FPGA Edition (includes Starter Edition)
    3. Cyclon V device support

DO NOT START INSTALL BEFORE ALL 3 FILES ARE DOWNLOADED!
After all 3 files are downloaded, execute the Quartus Prime Setup to install
everything. You should see a "Select Components" page during the setup. Make
sure all 3 components listed above are included. If not, double check if all 3
files are downloaded correctly and placed in the same folder.

==== Installation takes about 10 minutes

# One-time Software Configuration (3 min)
Start Quartus. It should ask you which license to use. Just choose

    "Run the Quartus Prime software"

to use the free license. Now, link modelsim to quartus by the following steps

    1. Go to Tools -> Options
    2. Select General -> EDA Tool Options
    3. Click on the ... of ModelSim - Altera, **Not ModelSim**
    4. Select your ModelSim installation directory. Should be similar to:

        ... /intelFPGA_lite/17.1/modelsim_ase/win32aloem

    5. Click on OK

# Synthesis the design (10 min)
## Open Project
Now, go to File -> Open Project, go to the mips_cpu subfolder and open

    mips_cpu.qpf

==== First time open the project takes about 15 seconds

The software will complain about sdram.qip/sip not found. Let's generate them!

## Generate qsys models (one-time)
For this project, clock generation logic (PLL) and memory controller are
generated using Altera's Qsys (also called Platform Designer). YOU DO NOT NEED
TO KNOW ANYTHING ABOUT HOW THIS MODULE WORKS! but why not take a look :D

    1. Go to Tools -> Platform Designer
======== Takes about 10 seconds to start
    2. Choose sdram.qsys, and click Open
======== Takes about 10 seconds to load
    3. Click the "Generate HDL" button found at bottom right of the window
    4. Under Simulation section, change the option to

        Create simulation model:  **Verilog**

    5. Click Generate
======== Takes about 30 seconds
    6. Click Close, Click Finish

## Browse through the top level files (5 min)
On the top left of the window, there is a Project Navigator. Double click on

    mips_cpu

to see the content of the top level design. The top level design contains
everything that is supposed to be burned onto a physical FPGA. First you will
see a lot of inputs and outputs. They correspond to physical pins of FPGA.
Scroll down to the REG/WIRE section, you will see some logic and interface
declarations. Wow what's logic? Interfaces? These are all SystemVerilog
features. I'll cover them in the detailed documentation.

Next is a gaint module called sdram. This corresponds to the model we just
generated using Qsys. Again, you don't need to know about this module.

Last, but most importantly, we have the mips_core module. This is the module
you will be working on. Most of you (I'd say everyone) should not (and don't
need to) change the content of this top level design (mips_cpu.sv). The actual
top level of your design is the mips_core module.

Expand mips_cpu in the Project Navigator by clicking the tiny triangle to the
left of mips_cpu. Double click the mips_core:MIPS_CORE to open mips_core.sv.
This is your actual top level design. You can make any changes to this file.
If you are doing Super-scalar + Out-of-ourder + Register renaming, then you
probably need to remove all modules within this file. That's OK.

First 80 lines are interface declarations. After that, each unit is declared
in different stages. Refer to detailed documentation.

## Synthesis
Now let's synthesis the design. On the left you will see Tasks sub-window.
Double click "Analysis & Synthesis" to start synthesis.

======== Takes about 1 minute

Your final design should have no error (warnings are fine) in this step.
After it's done, a flow summary is showed. How many registers are used? (3347)
How many BRAM bits are used? (80032)

On the left of the summary, there are a list of all reports through the flow.
Go to Analysis & Synthesis -> Connectivity Checks. You will see a multiple
"Port Connectivity Checks" there. They are all complaining about problems inside
the sdram module, so it's fine for you to ignore them. However, if this report
complains about mips_core during your development, that's not a good sign. Make
sure it's fixed or you are intentionally doing it.

Now, scroll up and click on the "resource Utilization by Entity". Which module
takes the most area of mips_core? (d_cache) Why?


# Simulation (5 min ~ 1 hour)
Now it's the fun part. Let's run the simulation. Let's take a look at the
testbench first. Use your best text editor to open mips_cpu/testbench.sv file.
Go over the testbench and try to understand what it is doing. Modify both paths
of readmemh statements. The testbench is not part of the design, so don't add
it to your quartus project.

Now, go back to quartus. Make sure Synthesis is done before you start the
simulation. Go to Tools -> Run Simulation Tool -> RTL Simulation.

ModelSim should be started.

If you see, "Unrecognized switch" error message, it's probably because your
project path has spaces in it. Make sure there is no space.

    E.g. D:/CSE 148/cse148_baseline/ is not OK
         D:/CSE_148/cse148_baseline/ is fine

Run into other errors? Google/Piazza it!

After ModelSim started, it automatically compiles all components of mips_cpu.
We still need compile the testbench and the sdram simulation model. A tcl file
is prepared for you to do everything. Follow these steps:

    1. Click on the Transcript sub-window to activate it.
    2. Go to File -> Load -> Macro File
    3. Go up two layers (back to the project directory), choose testbench.do
    4. Similarly, load the wave.do script. This sets up the wave window for you.
    5. Go to Simulate -> Run -> Run -all

The simulation should now break on 2290 ns. This is the beginning of mips_core
spinning. You can then do Simulate -> Run -> Run 100 to step through. Take a
look at the wave window. When is the first instruction executed?

Alternatively you can use buttons in the tool bar. Find that tool bar with
"100 ns" and hover each button to see what they do.

Now if you want to simulate the entire program, **close the wave window**, and
then click on run -all. Benchmark is set to nqueens in the testbench. It takes
a while to simulate (20 min on my desktop). At the end, the transcript panel
should say, DONE test 00000160. To restart the simulation, go to Simulate ->
Restart.

To change the benchmark, edit testbench to use other ones like qsort, esift.
Details of these benchmarks are provided in the detailed documentation. After
the modification, you need to recompile the testbench. To do so

    1. On the left section of the window, there is a Library tab. Activate it.
    2. Expand work
    3. Scroll down and find testbench
    4. Right click it, choose recompile.
    5. Restart the simulation to load the new design.

You can use the same trick to recompile & reload other modules. You don't need
to start over if you only change one or to files.

# Play around the design
Now it's time for you to go over the SystemVerilog files under mips_core folder.
If you have any questions, feel free to Google/Piazza/Office hour it. Feel free
to change the size of caches, modify branch predictors.

Here are the steps to add new files to the project.

    1. Copy your file to the project folder.
    2. Go to Project -> Add/Remove Files in Project
    3. Click on the ... button
    4. Choose the files you want to add. Use Ctrl/Shift to select multiple ones
    5. Click Open
